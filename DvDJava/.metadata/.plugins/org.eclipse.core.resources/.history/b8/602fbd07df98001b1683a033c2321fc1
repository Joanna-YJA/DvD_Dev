package gov.dsta.luciad;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import javax.imageio.ImageIO;

import com.luciad.gui.TLcdHaloIcon;
import com.luciad.gui.TLcdImageIcon;
import com.luciad.gui.TLcdSymbol;
import com.luciad.shape.ILcdShape;
import com.luciad.shape.shape2D.TLcdLonLatPoint;
import com.luciad.view.lightspeed.layer.ILspInteractivePaintableLayer;
import com.luciad.view.lightspeed.layer.ILspLayer;
import com.luciad.view.lightspeed.layer.TLspPaintRepresentationState;
import com.luciad.view.lightspeed.style.ILspTexturedStyle.TextureCoordinatesMode;
import com.luciad.view.lightspeed.style.ILspWorldElevationStyle.ElevationMode;
import com.luciad.view.lightspeed.style.TLspFillStyle;
import com.luciad.view.lightspeed.style.TLspFillStyle.Builder;
import com.luciad.view.lightspeed.style.TLspFillStyle.StipplePattern;
import com.luciad.view.lightspeed.style.TLspIconStyle;
import com.luciad.view.lightspeed.style.TLspIconStyle.ScalingMode;
import com.luciad.view.lightspeed.style.TLspLineStyle;
import com.luciad.view.lightspeed.style.TLspLineStyle.DashPattern;
import com.luciad.view.lightspeed.style.TLspVerticalLineStyle;
import com.luciad.view.lightspeed.style.TLspViewDisplacementStyle;
import com.luciad.view.lightspeed.style.styler.TLspEditableStyler;

import gov.dsta.luciad.interfaces.IKGraphic;
import gov.dsta.luciad.interfaces.IKPoint;
import gov.dsta.luciad.interfaces.KImage;
import gov.dsta.luciad.interfaces.KPoint;

public class ShapeStyleHelper {

	private static final String MSG_PREFIX = "@GIS:";
	
	private static final float STYLER_OPACITY = 0.2f;

	public static void applyStyleToPointShape(IKGraphic aModel, ILcdShape shape, ILspLayer aLayer, IKLayer kLayer) {

		Boolean isReducedDisplaySupported = kLayer.isReducedDisplaySupported();

		ILspInteractivePaintableLayer lspLayer = (ILspInteractivePaintableLayer) aLayer;
		TLspEditableStyler mainStyler = (TLspEditableStyler) lspLayer
				.getStyler(TLspPaintRepresentationState.REGULAR_BODY);
		TLspEditableStyler selStyler = (TLspEditableStyler) lspLayer
				.getStyler(TLspPaintRepresentationState.SELECTED_BODY);
		
		List<com.luciad.view.lightspeed.style.ALspStyle> mainStyleList = new ArrayList<com.luciad.view.lightspeed.style.ALspStyle>();
		List<com.luciad.view.lightspeed.style.ALspStyle> selStyleList = new ArrayList<com.luciad.view.lightspeed.style.ALspStyle>();

		//Get the image
		Image image = null;
		if (aModel instanceof KMarker) {
			
			KMarker model = (KMarker) aModel;
			switch (model.getStyle()) {
			case KDotStyle.CROSS_VALUE:
				try {
					image = createCrossMarkerIcon();
					// Define icon style
					TLspIconStyle iconStyle = TLspIconStyle.newBuilder()
							.offset(0,0)
							.icon(new TLcdHaloIcon(new TLcdImageIcon(image), Color.WHITE, 2))
							// Set icons to have fixed view coordinates
							.scalingMode(ScalingMode.VIEW_SCALING).useOrientation(true)
							.zOrder(1).scale(1.0)
							.elevationMode(ElevationMode.OBJECT_DEPENDENT)
							// Set the icons' alpha value
							.opacity(1.0f).build();

					mainStyleList.add(iconStyle);
					selStyleList.add(iconStyle);
				} catch (IOException e) {
					e.printStackTrace();
					break;
				}
				break;
			case KDotStyle.FILLED_CIRCLE_VALUE:
				 TLspIconStyle iconStyle = TLspIconStyle.newBuilder()
		    		.icon( new TLcdSymbol( TLcdSymbol.FILLED_CIRCLE, 
		    				8, 
		    				model.getPalette().getDot().getColor(), 
		    				model.getPalette().getDot().getColor()))
		    				.build();

				 mainStyleList.add(iconStyle);
				 selStyleList.add(iconStyle);				
				 break;
			case KDotStyle.FILLED_DIAMOND_VALUE:
				//TODO
				break;
			case KDotStyle.FILLED_SQUARE_VALUE:
				//TODO
				break;
			case KDotStyle.PLUS_VALUE:
				//TODO
				break;
			case KDotStyle.TRIANGLE_VALUE:
				//TODO
				break;
			default:
				//TODO
				return;
			}
		} else if(aModel instanceof KImage) {
			
			KImage imgModel = (KImage) aModel;
			TLspIconStyle iconStyle = TLspIconStyle
					.newBuilder()
					.icon(new TLcdHaloIcon(new TLcdImageIcon(imgModel.getImage()), Color.WHITE, 2))
					// Set icons to have fixed view coordinates
					//.scalingMode(ScalingMode.VIEW_SCALING)
					.scalingMode(ScalingMode.WORLD_SCALING_CLAMPED)
					.useOrientation(true)
					.zOrder(1).scale(1.0)
					.elevationMode(ElevationMode.OBJECT_DEPENDENT)
					// Set the icons' alpha value
					.opacity(1.0f)
					.useOrientation(false)
					.build();
			double aOrientation = imgModel.getOrientation();
			
			if (shape instanceof OrientedLonLatPointModel) {
				((OrientedLonLatPointModel) shape).setOrientation(aOrientation);

			}
			// Set selected image if there is any.
			Image selectedImage = imgModel.getSelectedImg();

			// If no selected image.
			// Use default image.
			if (selectedImage == null) {
				selectedImage = imgModel.getImage();
			}

			// Style selected image.
			TLspIconStyle selIconStyle = TLspIconStyle.newBuilder().useOrientation(true)
					.icon(new TLcdHaloIcon(new TLcdImageIcon(selectedImage), Color.WHITE, 2)).zOrder(0).build();

			// reduced style
			if (isReducedDisplaySupported) {

				TLspIconStyle reducedIconStyle = TLspIconStyle
						.newBuilder()
						.icon(new TLcdHaloIcon(new TLcdImageIcon(imgModel.getReduceDisplayImg()), Color.WHITE, 2))
						// Set icons to have fixed view coordinates
						.scalingMode(ScalingMode.VIEW_SCALING)
						.useOrientation(true).zOrder(1).scale(1.0)
						.elevationMode(ElevationMode.OBJECT_DEPENDENT)
						// Set the icons' alpha value
						.opacity(1.0f)
						.useOrientation(false)
						.build();
			
				((ReducedDisplayImageStyler) mainStyler).setReducedStyle(lspLayer.getModel(), shape,
						Arrays.<com.luciad.view.lightspeed.style.ALspStyle> asList(reducedIconStyle));

				((ReducedDisplayImageStyler) selStyler).setReducedStyle(lspLayer.getModel(),
						shape, Arrays.<com.luciad.view.lightspeed.style.ALspStyle> asList(selIconStyle,
								reducedIconStyle));
			}
			TLspVerticalLineStyle verticalLine = TLspVerticalLineStyle.newBuilder().color(Color.BLACK).build();
			mainStyleList.add(verticalLine);
			selStyleList.add(verticalLine);

			mainStyleList.add(iconStyle);
			selStyleList.add(selIconStyle);
			selStyleList.add(iconStyle);
			
		} else if(aModel instanceof KUnit) {
			
			KUnit model = (KUnit) aModel;
			KGSymbolGateway gateway = new KGSymbolGateway();
			gateway.setTemplateSet(model.getKGSymbolTemplateSet());
			BufferedImage unitImage = gateway.createSymbolImage(model.getSymbol(), model.getPalette());
			
			IKPoint offSetPoint = calculateOffSet(model);
			
			// Define target icon style
			TLspIconStyle targetIconStyle = createIconStyle(offSetPoint, unitImage, 0);
			mainStyleList.add(targetIconStyle);
			
			Set<String> keySet = model.getImageMap().keySet();
			int imgCount = 1;
			
			IKPoint point = new KPoint(0, 0);
			for (String key : keySet) {
				Image img = model.getImageMap().get(key);
				TLspIconStyle iconStyle = createIconStyle(point, img, imgCount++);
				mainStyleList.add(iconStyle);
			}

			TLcdLonLatPoint imageShape = new LonLatPointModel(model.getLocation()
					.getX(), model.getLocation().getY());

			// Set selected image if there is any.
			Image selectedImage = model.getSelectedImg();

			if (selectedImage != null) {
				TLspIconStyle selIconStyle = TLspIconStyle.newBuilder()
						.icon(new TLcdHaloIcon(new TLcdImageIcon(selectedImage), Color.WHITE, 2))
						.zOrder(3)
						.useOrientation(false)
						.build();
				selStyleList.add(selIconStyle);
			}

			// reduced style
			if (isReducedDisplaySupported) {
				TLspIconStyle reducedIconStyle = createIconStyle(new KPoint(0, 0), model.getReduceDisplayImg(), 0);
				
				TLspIconStyle selIconStyle = TLspIconStyle.newBuilder()
						.icon(new TLcdHaloIcon(new TLcdImageIcon(selectedImage), Color.WHITE, 2))
						.zOrder(3)
						.useOrientation(false)
						.build();

				((ReducedDisplayImageStyler) mainStyler).setReducedStyle(lspLayer.getModel(), imageShape,
						Arrays.<com.luciad.view.lightspeed.style.ALspStyle> asList(reducedIconStyle));
			
				((ReducedDisplayImageStyler) selStyler).setReducedStyle(lspLayer.getModel(), imageShape, 
						Arrays.<com.luciad.view.lightspeed.style.ALspStyle> asList(selIconStyle, reducedIconStyle));

			}
			selStyleList.addAll(mainStyleList);
		}
		
		mainStyler.setStyle(lspLayer.getModel(), shape, mainStyleList);
		selStyler.setStyle(lspLayer.getModel(), shape, selStyleList);

	}
	
	private static IKPoint calculateOffSet(KUnit model) {
		// Calculate the offset base icon
		Dimension imageDimension = model.getSymbol().pack(model.getPalette());
		Point iconOrgin = model.getSymbol().getComponents().get(0).getOrigin();
		Dimension iconDimension = model.getSymbol().getComponents().get(0).getDimension();
		
		double x1 = iconOrgin.getX() + iconDimension.width/2.0;
		double y1 = iconOrgin.getY() + iconDimension.height/2.0;
		
		final double offSetX = imageDimension.width/2.0 - x1;
		final double offSetY = imageDimension.height/2.0 - y1;
		
		IKPoint c = new KPoint(offSetX, offSetY);
		
		return c;
				
	}
	
	private static Image createCrossMarkerIcon() throws IOException {
		//TODO read from config?
		File dir1 = new File(System.getProperty("user.dir") + "/icons/type/enemy/dummy.png");	
		BufferedImage image = ImageIO.read(dir1);
		return image;
	}
	
	private static TLspIconStyle createIconStyle(IKPoint offSetPoint, Image img, int zOrder ) {
		// Define icon style
		TLspIconStyle iconStyle = TLspIconStyle.newBuilder()
				.offset(offSetPoint.getX(),offSetPoint.getY())
				.icon(new TLcdHaloIcon(new TLcdImageIcon(img), Color.WHITE, 2))
				// Set icons to have fixed view coordinates
				.scalingMode(ScalingMode.VIEW_SCALING).useOrientation(true)
				.zOrder(zOrder).scale(1.0)
				.elevationMode(ElevationMode.OBJECT_DEPENDENT)
				// Set the icons' alpha value
				.opacity(1.0f)
				.useOrientation(false)
				.build();
		
		return iconStyle;
	}
	
	public static void applyStyleToShape(IKGraphic aModel, ILcdShape shape, ILspLayer aLayer) {
		ElevationMode elevationMode = ElevationMode.OBJECT_DEPENDENT;
		if(aModel.getAttribute().isDrapped()){
			elevationMode = ElevationMode.ON_TERRAIN;
		}
		IKPalette palette = aModel.getPalette();
		IKVisualAttribute ikVisualAttribute =  aModel.getAttribute();
		
		boolean isFilled = ikVisualAttribute.isFilled();
		boolean isOutlined = ikVisualAttribute.isOutlined();
		String imagePath = ikVisualAttribute.getImage();
		float aOpacity = ikVisualAttribute.getAlpha();

		if (palette == null) {
			palette = new KPalette();
			palette.getBrush().setColor(Color.yellow);
			palette.getBrush().getPen().setColor(Color.BLACK);
		}

		ILspInteractivePaintableLayer lspLayer = (ILspInteractivePaintableLayer) aLayer;
		TLspEditableStyler mainStyler = (TLspEditableStyler) lspLayer
				.getStyler(TLspPaintRepresentationState.REGULAR_BODY);
		TLspEditableStyler selStyler = (TLspEditableStyler) lspLayer
				.getStyler(TLspPaintRepresentationState.SELECTED_BODY);
		TLspEditableStyler editStyler = (TLspEditableStyler) lspLayer
				.getStyler(TLspPaintRepresentationState.EDITED_BODY);
		List<com.luciad.view.lightspeed.style.ALspStyle> mainStyleList = new ArrayList<com.luciad.view.lightspeed.style.ALspStyle>();
		List<com.luciad.view.lightspeed.style.ALspStyle> selStyleList = new ArrayList<com.luciad.view.lightspeed.style.ALspStyle>();
		List<com.luciad.view.lightspeed.style.ALspStyle> editStyleList = new ArrayList<com.luciad.view.lightspeed.style.ALspStyle>();

		//create the required style
		String lineStyleVal = palette.getBrush().getPen().getPattern();

		if (isOutlined) {
			DashPattern dashPattern;
			int SOLID_SCALE = 0;
			int DASH_SCALE = 10;

			//if 0 means solid
			if ("SOLID".equalsIgnoreCase(lineStyleVal)) {
				dashPattern = new TLspLineStyle.DashPattern(DashPattern.SOLID, SOLID_SCALE);
			}
			// if not 0 means dash
			else {
				dashPattern = new TLspLineStyle.DashPattern(DashPattern.LONG_DASH, DASH_SCALE);
			}

			com.luciad.view.lightspeed.style.ALspStyle lineStyle = TLspLineStyle.newBuilder()
					.color(palette.getBrush().getPen().getColor())
					//.dashPattern(dashPattern)
					.width(1).dashPattern(dashPattern).width(palette.getBrush().getPen().getWidth())
					.elevationMode(elevationMode)
					.opacity(aOpacity)
					.build();

			com.luciad.view.lightspeed.style.ALspStyle selLineStyle = TLspLineStyle.newBuilder()
					.color(palette.getBrush().getPen().getColor())
					//.dashPattern(dashPattern)
					.width(2).dashPattern(dashPattern).width(palette.getBrush().getPen().getWidth())
					.elevationMode(elevationMode)
					.opacity(aOpacity)
					.build();

			com.luciad.view.lightspeed.style.ALspStyle vertLineStyle = TLspVerticalLineStyle.newBuilder()
					.color(Color.white).opacity(STYLER_OPACITY)
					.build();
			
			mainStyleList.add(lineStyle);
			mainStyleList.add(vertLineStyle);

			mainStyleList.add(TLspViewDisplacementStyle.newBuilder().build());

			selStyleList.add(selLineStyle);
			editStyleList.add(selLineStyle);

		}

		//add fill style
		BufferedImage img = null;

		if (imagePath != null) {
			try {
				img = ImageIO.read(new File(imagePath));

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		if (isFilled) {
			Builder<?> fillStylebuilder = TLspFillStyle.newBuilder().elevationMode(elevationMode);

			if("DASH".equalsIgnoreCase(palette.getBrush().getPattern())) {
				fillStylebuilder.stipplePattern(StipplePattern.HATCHED);
			}
			
			if (img != null) {
				fillStylebuilder.texture(img).textureCoordinatesMode(TextureCoordinatesMode.OBJECT_RELATIVE)
					// Set white in order for opacity to work.
					.color(Color.WHITE).opacity(aOpacity);
			} else {
				fillStylebuilder.color(palette.getBrush().getColor()).opacity(aOpacity);
			}

			mainStyleList.add(fillStylebuilder.build());
			selStyleList.add(fillStylebuilder.build());
			editStyleList.add(fillStylebuilder.build());

		}

		mainStyler.setStyle(lspLayer.getModel(), shape, mainStyleList);
		selStyler.setStyle(lspLayer.getModel(), shape, selStyleList);
		editStyler.setStyle(lspLayer.getModel(), shape, editStyleList);

	}

	/*
	 * For internal use when there isn't any use of KModels
	 */
	public static void applyStyleToShape(ILcdShape shape, ILspLayer aLayer, Color fillColor, Color lineColor,
			boolean isFilled) {

		ILspInteractivePaintableLayer lspLayer = (ILspInteractivePaintableLayer) aLayer;
		TLspEditableStyler mainStyler = (TLspEditableStyler) lspLayer
				.getStyler(TLspPaintRepresentationState.REGULAR_BODY);
		TLspEditableStyler selStyler = (TLspEditableStyler) lspLayer
				.getStyler(TLspPaintRepresentationState.SELECTED_BODY);
		List<com.luciad.view.lightspeed.style.ALspStyle> mainStyleList = new ArrayList<com.luciad.view.lightspeed.style.ALspStyle>();
		List<com.luciad.view.lightspeed.style.ALspStyle> selStyleList = new ArrayList<com.luciad.view.lightspeed.style.ALspStyle>();

		String lineStyleVal = "SOLID";
		boolean isOutlined = true;
		if (isOutlined) {
			DashPattern dashPattern;
			int SOLID_SCALE = 0;
			int DASH_SCALE = 10;

			//if 0 means solid
			if ("SOLID".equalsIgnoreCase(lineStyleVal)) {
				dashPattern = new TLspLineStyle.DashPattern(DashPattern.SOLID, SOLID_SCALE);
			}
			// if not 0 means dash
			else {
				dashPattern = new TLspLineStyle.DashPattern(DashPattern.LONG_DASH, DASH_SCALE);
			}

			com.luciad.view.lightspeed.style.ALspStyle lineStyle = TLspLineStyle.newBuilder()
					.color(lineColor)
					//.dashPattern(dashPattern)
					.dashPattern(dashPattern).width(2)
					.elevationMode(ElevationMode.ON_TERRAIN)
					//.opacity(aOpacity)
					.build();

			com.luciad.view.lightspeed.style.ALspStyle selLineStyle = TLspLineStyle.newBuilder()
					.color(lineColor)
					//.dashPattern(dashPattern)
					.width(2).dashPattern(dashPattern)
					.elevationMode(ElevationMode.ON_TERRAIN)
					//.opacity(aOpacity)
					.build();

			mainStyleList.add(lineStyle);
			selStyleList.add(selLineStyle);

		}
		
		if (isFilled) {
			Builder<?> fillStylebuilder = TLspFillStyle.newBuilder().elevationMode(ElevationMode.ON_TERRAIN)
					.color(fillColor);

			mainStyleList.add(fillStylebuilder.build());
			selStyleList.add(fillStylebuilder.build());

		}

		mainStyler.setStyle(lspLayer.getModel(), shape, mainStyleList);
		selStyler.setStyle(lspLayer.getModel(), shape, selStyleList);
	}


}
